#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

declare -a ENVS=("dev" "prod")
export $ENVS

export ROOT_DIRECTORY="$SCRIPT_DIR"
export CODE_DIRECTORY="$ROOT_DIRECTORY/.code"
export BIN_DIRECTORY="$CODE_DIRECTORY/bin"
export APPS_DIRECTORY="$ROOT_DIRECTORY/apps"
export SERVERS_DIRECTORY="$ROOT_DIRECTORY/servers"
export TEMPLATES_DIRECTORY="$CODE_DIRECTORY/templates"
export PATH_TO_CODE_ROOT="$ROOT_DIRECTORY/../code"

source "$BIN_DIRECTORY/helpers/color_helpers.sh"
source "$BIN_DIRECTORY/helpers/functions.sh"

if [ ! -d "$APPS_DIRECTORY" ]; then
  mkdir -p "$APPS_DIRECTORY"
fi

if [ ! -d "$PATH_TO_CODE_ROOT" ]; then
  mkdir -p "$PATH_TO_CODE_ROOT"
fi

# GENERAL COMMAND FORMAT
# kit [app] [command] [args]
#   [app] in subdirectory of ./apps directory
# SHORTENED VERSIONS
# kit [command] [args]        same as kt first_app [command] [args]

export OARGS=$@

export APP="$1"
export COMMAND="$2"

IS_APP=false
if [ -d "${APPS_DIRECTORY}/${APP}" ]; then
  # Found a valid app. Shift arguments to prepare for ARGS="$@" line below
  IS_APP=true
  shift 1
elif [ -f "${CODE_DIRECTORY}/stacks/${APP}.yml" ]; then
  # Found a valid stack file. Shift arguments to prepare for ARGS=$@ line below
  shift 1
else
  # If first argument is not a directory in /apps, default to first app in /apps directory and shift variables
  APP_DIR=$(ls -d "$APPS_DIRECTORY"/* | head -1)
#  echo "APP_DIR: $APP_DIR"
  APP=$(basename "$APP_DIR")
  COMMAND="$1"
fi

# Shift off the command to leave just the args variable
shift 1
ARGS=$@

if [ "$IS_APP" == true ]; then
  export APP_DIRECTORY="${APPS_DIRECTORY}/${APP}"
  export PATH_TO_CODE="$ROOT_DIRECTORY/../code/${APP}"

  # Use the prod environment for production commands
  case "$COMMAND" in
    "image" | "push" | "deploy" | "run")
      echo "ARGS: $ARGS"
      POSSIBLE_ENV=""
      if [ "$COMMAND" == "deploy" ]; then
        if [ -n "$2" ]; then
          POSSIBLE_ENV="$1"
        fi
      else
        POSSIBLE_ENV="$1"
      fi
      if [ -n "$POSSIBLE_ENV" ] && [ -d "${APP_DIRECTORY}/envs/${POSSIBLE_ENV}" ]; then
        echo "Found ENV!!!"
        export ENV="${POSSIBLE_ENV}"
        shift 1
        ARGS=$@
      else
        export ENV="prod"
      fi
      ;;
    *)
      export ENV="dev"
      ;;
  esac
  export ENV_FILE="$APP_DIRECTORY/envs/${ENV}/.env"

  # TEMPLATE - allow the application template to set environment variables
  if [ -f "$APP_DIRECTORY/bin/set_env.sh" ]; then
    source "$APP_DIRECTORY/bin/set_env.sh"
  fi

  # Debugging lines (normally keep this commented out)
  echo_divider
  echo -e "${RED}NEW COMMAND:${RESET} APP: ${BLUE}$APP${RESET}, ENV: ${BLUE}$ENV${RESET}, COMMAND: ${BLUE}$COMMAND${RESET}, ARGS: ${BLUE}$ARGS${RESET}, SERVICE: ${BLUE}$ENTRY_SERVICE${RESET}"
  #echo_blue "APP_DIRECTORY: $APP_DIRECTORY"
  #echo_blue "ENTRY_SERVICE: $ENTRY_SERVICE"
  #echo_blue "PATH_TO_CODE: $PATH_TO_CODE"
  echo_divider

  # Exit early if the ENV_FILE does not exist
  if [ -n "$APP" ] && [ ! -f "$ENV_FILE" ]; then
    echo_red "The env file for the application does not exist!!"
    echo_red "Expected file here: $ENV_FILE"
    exit 1
  fi

  # Make variables in the ENV_FILE accessible to the script
  if [ -f "$ENV_FILE" ]; then
    set -a # automatically export all variables
    source "$ENV_FILE"
    set +a
  fi
fi

# Helper function to run docker compose commands
function run_docker_compose()
{
#  set -o xtrace
  # Main compose file
  COMPOSE_FILES=("-f" "${APP_DIRECTORY}/docker-compose.yml")
  if [ -f "${APP_DIRECTORY}/envs/${ENV}/docker-compose.yml" ]; then
    # Found an override compose file in the ENV directory
    COMPOSE_FILES+=("-f" "${APP_DIRECTORY}/envs/${ENV}/docker-compose.yml")
  fi
  docker compose "${COMPOSE_FILES[@]}" --env-file "${ENV_FILE}" "$@"
#  set +o xtrace
}

# Helper function to run ansible playbooks
function run_ansible()
{
  # Usage example:
  # run_ansible <SERVER> -v "aaa:bbb" -v "ccc:ddd" <PLAYBOOK>
#  set -o xtrace
  SERVER=$1
  shift 1

  SERVER_DIRECTORY="${ROOT_DIRECTORY}/servers/${SERVER}"
  SSH_DIR="${SERVER_DIRECTORY}/.ssh"

  AWS_DIR="${SERVER_DIRECTORY}/.aws"
  if [ ! -d "$AWS_DIR" ]; then
    # Try to copy the default credentials into this directory
    cp -r ~/.aws "$AWS_DIR"
  fi

#  echo "APP: ${APP}"
#  echo "ROOT_DIRECTORY: ${ROOT_DIRECTORY}"
#  echo "SERVER: ${SERVER}"
#  echo "SERVER_SETTINGS FILE: ${SERVER_SETTINGS_FILE}"
#  echo "SSH_DIR: ${SSH_DIR}"
#  echo "AWS_DIR: ${AWS_DIR}"
#  echo "$@"

  if [ -z "$SERVER" ]; then
    echo_red "Server name is required."
    exit 1
  fi

  if [ ! -d "$SSH_DIR" ]; then
    echo_red "SSH directory not found: ${SSH_DIR}"
    exit 1
  fi

  if [ ! -d "$AWS_DIR" ]; then
    echo_red "AWS credential directory not found: ${AWS_DIR}"
    exit 1
  fi

  # Create array of standard volumes
  local volumes=()
  volumes+=("-v" "$SERVER_DIRECTORY:/ansible/server")
  volumes+=("-v" "$SSH_DIR:/root/.ssh")
  volumes+=("-v" "$AWS_DIR:/root/.aws")

  local other_args=()
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -v)
        # Add this to the volumes
        volumes+=("-v" "$2")
        shift 2
        ;;
      *)
        other_args+=("$1")
        shift 1
        ;;
    esac
  done

#  echo "VOLUMES:"
#  echo "${volumes[@]}"
#  echo "OTHER ARGS:"
#  echo "${other_args[@]}"
#  echo "$@"
#  echo ${#other_args[@]}
  if [ ${#other_args[@]} -gt 1 ]; then
    echo "Expecting only one argument."
    exit 1
  fi

  if [ "${other_args[0]}" == "ssh" ]; then
    ANSIBLE_CMD="/bin/sh"
    ARGS=""
  else
    ANSIBLE_CMD="ansible-playbook"
    ARGS="${other_args[0]}"
  fi
  echo "ANSIBLE_CMD: $ANSIBLE_CMD"


  docker run --rm --pull=always -it \
    "${volumes[@]}" \
    rcravens/ansible "${ANSIBLE_CMD}" "${ARGS}"
#  set +o xtrace
}

# Handle the command
# TEMPLATE - First look into the template bin/commands directory
COMMAND_FILE="${APP_DIRECTORY}/bin/commands/${COMMAND}.sh"
if [ -f "$COMMAND_FILE" ]; then
  source "$COMMAND_FILE"
  # shellcheck disable=SC2086
  command_run $ARGS
else
  # Next look into the main directory for kit commands
  COMMAND_FILE="$BIN_DIRECTORY/commands/$COMMAND.sh"
  if [ -f "$COMMAND_FILE" ]; then
      source "$COMMAND_FILE"
      # shellcheck disable=SC2086
      command_run $ARGS
  else
      source "$BIN_DIRECTORY/commands/help.sh"
      # shellcheck disable=SC2086
      command_run $ARGS
  fi
fi