#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

declare -a ENVS=("dev" "prod")
export $ENVS

export ROOT_DIRECTORY="$SCRIPT_DIR"
export CODE_DIRECTORY="$ROOT_DIRECTORY/.code"
export BIN_DIRECTORY="$CODE_DIRECTORY/bin"
export APPS_DIRECTORY="$ROOT_DIRECTORY/apps"
export SERVERS_DIRECTORY="$ROOT_DIRECTORY/servers"
export TEMPLATES_DIRECTORY="$CODE_DIRECTORY/templates"
export PATH_TO_CODE_ROOT="$ROOT_DIRECTORY/../code"

source "$BIN_DIRECTORY/helpers/color_helpers.sh"
source "$BIN_DIRECTORY/helpers/functions.sh"
source "$BIN_DIRECTORY/helpers/docker_functions.sh"
source "$BIN_DIRECTORY/helpers/ansible_functions.sh"

if [ ! -d "$APPS_DIRECTORY" ]; then
  mkdir -p "$APPS_DIRECTORY"
fi

if [ ! -d "$PATH_TO_CODE_ROOT" ]; then
  mkdir -p "$PATH_TO_CODE_ROOT"
fi

# GENERAL COMMAND FORMAT
# kit [app:server] [command] [args]
#   `app` is subdirectory of ./apps directory
#   `server` is subdirectory of ./servers directory
# SHORTENED VERSIONS
# kit [command] [args]        same as kt first_app [command] [args]

export OARGS=$@

export APP="$1"
export SERVER=""
export COMMAND="$2"

# Split the APP:SERVER into components
if [[ $APP == *":"* ]]; then
  SERVER=$(echo $APP | cut -f2 -d:)
  APP=$(echo $APP | cut -f1 -d:)
fi

if [ -n "$SERVER" ]; then
  if [ -d "${SERVERS_DIRECTORY}/${SERVER}" ]; then
    # This server exists in the servers directory
    export SERVER_DIRECTORY="${SERVERS_DIRECTORY}/${SERVER}"
  else
    # This server does not exists
    echo_red "The '$SERVER' server does not exist."
    exit 1
  fi
fi

IS_APP=false
if [ -d "${APPS_DIRECTORY}/${APP}" ]; then
  # Found a valid app. Shift arguments to prepare for ARGS="$@" line below
  IS_APP=true
  shift 1
elif [ -f "${CODE_DIRECTORY}/stacks/${APP}.yml" ]; then
  # Found a valid stack file. Shift arguments to prepare for ARGS=$@ line below
  shift 1
else
  # If first argument is not a directory in /apps, default to first app in /apps directory and shift variables
  APP_DIR=$(ls -d "$APPS_DIRECTORY"/* | head -1)
#  echo "APP_DIR: $APP_DIR"
  APP=$(basename "$APP_DIR")
  COMMAND="$1"
  IS_APP=true
fi

# Shift off the command to leave just the args variable
shift 1
ARGS=$@

if [ "$IS_APP" == true ]; then
  export APP_DIRECTORY="${APPS_DIRECTORY}/${APP}"
  export PATH_TO_CODE="$ROOT_DIRECTORY/../code/${APP}"

  # Use the prod environment for production commands
  case "$COMMAND" in
    "image" | "push" | "deploy" | "run")
      echo "ARGS: $ARGS"
      POSSIBLE_ENV=""
      if [ "$COMMAND" == "deploy" ]; then
        if [ -n "$2" ]; then
          POSSIBLE_ENV="$1"
        fi
      else
        POSSIBLE_ENV="$1"
      fi
      if [ -n "$POSSIBLE_ENV" ] && [ -d "${APP_DIRECTORY}/envs/${POSSIBLE_ENV}" ]; then
        echo "Found ENV!!!"
        export ENV="${POSSIBLE_ENV}"
        shift 1
        ARGS=$@
      else
        export ENV="prod"
      fi
      ;;
    *)
      export ENV="dev"
      ;;
  esac
  export ENV_FILE="$APP_DIRECTORY/envs/${ENV}/.env"

  # TEMPLATE - allow the application template to set environment variables
  if [ -f "$APP_DIRECTORY/bin/set_env.sh" ]; then
    source "$APP_DIRECTORY/bin/set_env.sh"
  fi

  # Debugging lines (normally keep this commented out)
  echo_divider
  echo -e "${RED}NEW COMMAND:${RESET} APP: ${BLUE}$APP${RESET}, SERVER: ${BLUE}$SERVER${RESET}, ENV: ${BLUE}$ENV${RESET}, COMMAND: ${BLUE}$COMMAND${RESET}, ARGS: ${BLUE}$ARGS${RESET}, SERVICE: ${BLUE}$ENTRY_SERVICE${RESET}"
  #echo_blue "APP_DIRECTORY: $APP_DIRECTORY"
  #echo_blue "ENTRY_SERVICE: $ENTRY_SERVICE"
  #echo_blue "PATH_TO_CODE: $PATH_TO_CODE"
  echo_divider

  # Exit early if the ENV_FILE does not exist
  if [ -n "$APP" ] && [ ! -f "$ENV_FILE" ]; then
    echo_red "The env file for the application does not exist!!"
    echo_red "Expected file here: $ENV_FILE"
    exit 1
  fi

  # Make variables in the ENV_FILE accessible to the script
  if [ -f "$ENV_FILE" ]; then
    set -a # automatically export all variables
    source "$ENV_FILE"
    set +a
  fi
fi

# Handle the command
# TEMPLATE - First look into the template bin/commands directory
COMMAND_FILE="${APP_DIRECTORY}/bin/commands/${COMMAND}.sh"
if [ -f "$COMMAND_FILE" ]; then
  source "$COMMAND_FILE"
  # shellcheck disable=SC2086
  command_run $ARGS
else
  # Next look into the main directory for kit commands
  COMMAND_FILE="$BIN_DIRECTORY/commands/$COMMAND.sh"
  if [ -f "$COMMAND_FILE" ]; then
      source "$COMMAND_FILE"
      # shellcheck disable=SC2086
      command_run $ARGS
  else
      source "$BIN_DIRECTORY/commands/help.sh"
      # shellcheck disable=SC2086
      command_run $ARGS
  fi
fi